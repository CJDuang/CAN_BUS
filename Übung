/*
 * Uebung_06_27.c
 *
 * Created: 27.06.2023 17:24:51
 * Author : $LA8K00-OFMMN49EBF76
 */ 
//


// Blinklicht
//#include <avr/io.h>
//#include <stdio.h>
//
//int main(void)
//{
    //
	//DDRB = 0x01; // Aus
	//
	//DDRD = 0x00;// Ein
	//
	//PORTD = 0x08; // 0(3)1(2)0(1)0(0)
	//for (;;)
	//{
		//if ((PIND & 0x08) == 0)
		////if (0x04 == 0)
		//PORTB = 0x01; 
		//else
		//PORTB = 0x00;
	//}
	////printf("%c\n", PORTD);
//}



//// Blink mit Delay
//#include <avr/io.h>
//#include <stdio.h>
//#include<util/delay.h>
//int main()
//{
	//
	//DDRB = 0x07; // Aus
	//
	////DDRD = 0x00;// Ein
	//
	////PORTD = 0x08; // 0(3)1(2)0(1)0(0)
	//for (;;)
	//{
		//// if ((PIND & 0x08) == 0)
		//// if (0x04 == 0)
		//PORTB ^= 0x07;
		//// else
		//_delay_ms(500);
	//}
	////printf("%c\n", PORTD);
//}

//// Aufgabe 1
//#include <avr/io.h>
//#include<util/delay.h>
//int main()
//{
    //unsigned char wert = 0x01;
	//unsigned char zustand = 0;		
	//DDRB = 0x07; // Aus
	//DDRD = 0x00;
	//PORTD = 0x0C;
//
	//
//
	//while (1)
	//{
	//if ((PIND & 0x04) == 0)
	//{
	//PORTB = wert;
	//if(zustand == 0)
	//{ 
	//wert *= 2;
	//if(wert == 0x04)
	//{
	//zustand = 1;
	//}
	//}
	//else
	//{
	//wert /= 2;
	//if(wert == 0x01)
	//{
	//zustand = 0;
	//}
	//}
	 //_delay_ms(250);
	//}
	//if ((PIND & 0x08) == 0)
	//{
		//PORTB = 0x00;
		//_delay_ms(250);
	//}
	//}
	//
	//
	//
//}


//// Aufgabe 2
//#include <avr/io.h>
//#include<util/delay.h>
//
////#include <stdio.h>
//
//int main(void)
//{
    //
	//DDRB = 0x07; // Aus
	//
	//DDRD = 0x00;// Ein
	//
	//PORTD = 0x0C; // 1(3)1(2)0(1)0(0)
	//unsigned char led = 0x01;
	//for (;;)
	//{
	    //
		//if ((PIND & 0x04) == 0)
		//{
		    //led=led+1;
		//}
		//if(led == 0x08)
		//led = 0x01;
		//_delay_ms(500); 
		//PORTB = led;
		//if ((PIND & 0x08) == 0)
		//{
			//led=led-1;
		//}
		//if(led == 0x00)
		//led = 0x07;
		//_delay_ms(500);
		//PORTB = led;
	//}
	////printf("%c\n", PORTD);
//}
//
 //// Timer:
//#include <avr/io.h>
//#include <avr/interrupt.h>
//#include<util/delay.h>
//#ifndef F_CPU
//#define F_CPU 3686400
//#endif
//#define CYCLE_TIME 0.2
//#define T1VALUE (uint16_t)(65536 - F_CPU / 1024 * CYCLE_TIME + 0.5)
//volatile int TimerEvent = 0;
 //int main()
 //{
	 //int timerEvent;
	 //DDRB = 0x07;
	 //TCNT1 = T1VALUE;
	 //TIMSK1 = 1 << TCNT1;
	 //TCCR1B = 0x05;
	 //sei();
	 //for(;;) 
	 //{
	 //cli();
	 //timerEvent = TimerEvent;
	 //sei();
		//if (TimerEvent == 1)
		//{
		//cli();
		//TimerEvent = 0;
		//sei();
		//PORTB ^= 0x07;
		//}
	 //}
 //}
 //ISR(TIMSK1_OVF_vect)
 //{
 //TCNT1 = T1VALUE;
 ////PORTB ^= 0x07;
 //TimerEvent = 1; 
 //}



 // Aufgabe_3_a:
 //#include <avr/io.h>
 //#include <avr/interrupt.h>
 //int main(void)
 //{
 //
	 //unsigned char zustand = 0;
	 ////Aus
	 //DDRB = 0x07; // Aus
	 ////Ein
	 //DDRD = 0x00;
	 ////Wiedersatnd aktiv
	 //PORTD = 0x0C;
	//for(;;)
	//{
		//switch (zustand)
		//{
		//case 0:
			//
			//if((PIND & 0x04) == 0)
			//{
				//PORTB = 0x01;
				//zustand = 1;
			//}
			//break;
		//case 1:
	//
			//if((PIND & 0x04) != 0)
			//{
				//zustand = 2;
			//}
			//break;
		//case 2:
		//
			//if((PIND & 0x04) == 0)
			//{
				//PORTB = 0x00;
				//zustand = 3;
			//}
			//break;
		//case 3:
		//
			//if((PIND & 0x04) != 0)
			//{
				//zustand = 0;
			//}
			//break;
		//}
	//}
//}
 //
 //// Aufgabe_3_b:
 //#include <avr/io.h>
 //#include <avr/interrupt.h>
 ////
 //#ifndef F_CPU
 //#define F_CPU 3686400
 //#endif
 ///* Entprellzeit */
//
 //#define DEBOUNCE_TIME 0.05
 ///* die Startzeit von der CPU berechnen */
 //#define T0VALUE (uint8_t)(256 - F_CPU / 1024 * DEBOUNCE_TIME + 0.5)
//
 //volatile unsigned char EntprellZeit = 0;
 //int main(void)
 //{
 //
	 //unsigned char zustand = 0;
	 ////
	 //DDRB = 0x07; // Aus
	 ////
	 //DDRD = 0x00;
	 ////
	 //PORTD = 0x0C;
	 //sei();
	//for(;;)
	//{
		//switch (zustand)
		//{
			//case 0:
				//if((PIND & 0x04) == 0)
				//{
					//PORTB = 0x01;
					//zustand = 1;
				//
				//}
				//break;
			//case 1:
				//if((PIND & 0x04) != 0)
				//{
					//zustand = 2;
					//TCCR0B = 0x00;
					//TCNT0 = T0VALUE;
					//TIMSK0 = 1 << TCNT0;
					//TCCR0B = 0x05;
					//EntprellZeit = 0;
				//}
				//break;
			//case 2:
				//if(EntprellZeit ==1)
				//{
					//zustand = 3;
				//}
				//else if((PIND & 0x04) == 0)
				//{
					//zustand = 1;
				//}
				//break;
			//case 3:
				//if((PIND & 0x04) == 0)
				//{
					//PORTB = 0x00;
					//zustand = 4;
				//
				//}
				//break;
			//case 4:
				//if((PIND & 0x04) != 0)
				//{
					//zustand = 5;
					//TCCR0B = 0x00;
					//TCNT0 = T0VALUE;
					//TIMSK0 = 1 << TCNT0;
					//TCCR0B = 0x05;
					//EntprellZeit = 0;
				//}
				//break;
			//case 5:
				//if(EntprellZeit ==1)
				//{
					//zustand = 0;
				//}
				//else if((PIND & 0x04) == 0)
				//{
					//zustand = 4;
				//}
				//break;
		//}
		//
	//}
//
 //}
 //ISR(TIMER0_OVF_vect)
 //{
	 //TCCR0B = 0x00;
	 //EntprellZeit = 1;
 //}




 //Aufgabe 4:
//
 //#include <avr/io.h>
 //#include <avr/interrupt.h>
 //#include<util/delay.h>
 ////
 //#ifndef F_CPU
 //#define F_CPU 3686400
 //#endif
 ///* Entprellzeit */
//
 //#define DEBOUNCE_TIME 0.05
 //#define CYCLE_TIME 0.4
 ///* die Startzeit von der CPU berechnen */
 //#define T0VALUE (uint8_t)(256 - F_CPU / 1024 * DEBOUNCE_TIME + 0.5)
 //#define T1VALUE (uint16_t)(65536 - F_CPU / 1024 * CYCLE_TIME + 0.5)
 //volatile unsigned char EntprellZeit = 0;
 //volatile unsigned char EntprellZeit_B = 0;
 //unsigned char CheckTaster();
//
 //int main(void)
 //{
 //
	 //unsigned char zustand = 0;
	 //unsigned char substate = 0;
	 ////
	 //DDRB = 0x01; // Aus
	 ////
	 //DDRD = 0x00;
	 ////
	 //PORTD = 0x04;
	 //sei();
	//for(;;)
	//{
	 //switch (zustand)
		//{
			//case 0:
				//if(CheckTaster() == 1)
				//{
					//PORTB = 0x01;
					//TCCR1B = 0x00;
					//TCNT1 = T1VALUE;
					//TIMSK1 = 1 << TOIE1;
					//EntprellZeit_B = 0;
					//TCCR1B = 0x05;
					//zustand = 1;
					//substate = 0;
				//
				//}
				//break;
			//case 1:
				//if(CheckTaster() == 1)
				//{
					//PORTB = 0x00;
					//TCCR1B = 0x00;
//
					//zustand = 0;
				//}
				//else 
				//{
					//switch(substate)
					//{
						//case 0:
							//if(EntprellZeit_B == 1)
							//{
								//EntprellZeit_B = 0;
								//PORTB = 0x00;
								//substate = 1;
							//}
							//break;
						//case 1:
							//if(EntprellZeit_B == 1)
							//{
								//EntprellZeit_B = 0;
								//PORTB = 0x01;
								//substate = 0;
							//}
							//break;
					//}
//
				//}
				//break;
		 //}
		//
	//}
//
 //}
 //unsigned char CheckTaster()
 //{
	 //unsigned char result = 0;
	 //static unsigned char zustand= 0;
	 //switch (zustand)
			//{
				//case 0:
					//if((PIND & 0x04) == 0)
					//{
						//zustand =1;
						//result = 1;
				//
					//}
					//break;
				//case 1:
					//if((PIND & 0x04) != 0)
					//{
						//zustand = 2;
						//TCCR0B = 0x00;
						//TCNT0 = T0VALUE;
						//TIMSK0 = 1 << TOIE0;
						//TCCR0B = 0x05;
						//EntprellZeit = 0;
					//}
					//break;
				//case 2:
					//if(EntprellZeit ==1)
					//{
						//zustand = 0;
					//}
					//else if((PIND & 0x04) == 0)
					//{
						//zustand = 1;
					//}
					//break;
				//
			//}
			//return result;
 //}
 //ISR(TIMER0_OVF_vect)
 //{
	 //TCCR0B = 0x00;
	 //EntprellZeit = 1;
 //}
  //ISR(TIMER1_OVF_vect)
 //{
	 //TCNT1 = T1VALUE;
	 //EntprellZeit_B = 1;
 //}


//Aufgabe 4_b
 #include <avr/io.h>
 #include <avr/interrupt.h>
 #include<util/delay.h>
 //
 #ifndef F_CPU
 #define F_CPU 3686400
 #endif
 /* Entprellzeit */

 #define DEBOUNCE_TIME 0.05
 #define CYCLE_TIME 1.0
 /* die Startzeit von der CPU berechnen */
 #define T0VALUE (uint8_t)(256 - F_CPU / 1024 * DEBOUNCE_TIME + 0.5)
 //#define T1VALUE (uint16_t)(65536 - F_CPU / 1024 * CYCLE_TIME + 0.5)
 //#define T1VALUE (uint16_t)(65536 - F_CPU / PRESCALER / FREQUENCE * 0.5 + 0.5)
 #define PRESCALER 64
 uint16_t const TimerInit[20] = {(uint16_t)(65536 - F_CPU / PRESCALER / 1.0 * 0.5 + 0.5),
 								 (uint16_t)(65536 - F_CPU / PRESCALER / 2.0 * 0.5 + 0.5),
								 (uint16_t)(65536 - F_CPU / PRESCALER / 3.0 * 0.5 + 0.5),
								 (uint16_t)(65536 - F_CPU / PRESCALER / 4.0 * 0.5 + 0.5),
								 (uint16_t)(65536 - F_CPU / PRESCALER / 5.0 * 0.5 + 0.5),
								 (uint16_t)(65536 - F_CPU / PRESCALER / 6.0 * 0.5 + 0.5),
								 (uint16_t)(65536 - F_CPU / PRESCALER / 7.0 * 0.5 + 0.5),
								 (uint16_t)(65536 - F_CPU / PRESCALER / 8.0 * 0.5 + 0.5),
								 (uint16_t)(65536 - F_CPU / PRESCALER / 9.0 * 0.5 + 0.5),
								 (uint16_t)(65536 - F_CPU / PRESCALER / 10.0 * 0.5 + 0.5),
								 (uint16_t)(65536 - F_CPU / PRESCALER / 11.0 * 0.5 + 0.5),
								 (uint16_t)(65536 - F_CPU / PRESCALER / 12.0 * 0.5 + 0.5),
								 (uint16_t)(65536 - F_CPU / PRESCALER / 13.0 * 0.5 + 0.5),
								 (uint16_t)(65536 - F_CPU / PRESCALER / 14.0 * 0.5 + 0.5),
								 (uint16_t)(65536 - F_CPU / PRESCALER / 15.0 * 0.5 + 0.5),
								 (uint16_t)(65536 - F_CPU / PRESCALER / 16.0 * 0.5 + 0.5),
								 (uint16_t)(65536 - F_CPU / PRESCALER / 17.0 * 0.5 + 0.5),
								 (uint16_t)(65536 - F_CPU / PRESCALER / 18.0 * 0.5 + 0.5),
								 (uint16_t)(65536 - F_CPU / PRESCALER / 19.0 * 0.5 + 0.5),
								 (uint16_t)(65536 - F_CPU / PRESCALER / 20.0 * 0.5 + 0.5)}; 
 volatile unsigned char EntprellZeit = 0;
 volatile unsigned char EntprellZeit_B = 0;
 unsigned char TimerIndex = 0;
 unsigned char CheckTaster();

 int main(void)
 {
 
	 unsigned char zustand = 0;
	 unsigned char substate = 0;
	 signed char inkrement = 1;
	 //
	 DDRB = 0x01; // Aus
	 //
	 DDRD = 0x00;
	 //
	 PORTD = 0x04;
	 sei();
	for(;;)
	{
	 switch (zustand)
		{
			case 0:
				if(CheckTaster() == 1)
				{
					PORTB = 0x01;
					TCCR1B = 0x00;
					TCNT1 = TimerInit[0];
					TIMSK1 = 1 << TOIE1;
					EntprellZeit_B = 0;
					TCCR1B = 0x05;
					zustand = 1;
					substate = 0;
				
				}
				break;
			case 1:
				if(CheckTaster() == 1)
				{
					PORTB = 0x00;
					TCCR1B = 0x00;

					zustand = 0;
				}
				else 
				{
					if(EntprellZeit_B == 1)
					{
						EntprellZeit_B = 0;
						if(substate == 0)
						{
							PORTB = 0x00;
							TimerIndex += inkrement;
							if(TimerIndex == 19|| TimerIndex == 0 )
								inkrement *= -1;
							substate = 1;
						}
						else
						{
							PORTB = 0x01;
							substate = 0; 
						}
					}
				}
				break;
		 }
		
	}

 }
 unsigned char CheckTaster()
 {
	 unsigned char result = 0;
	 static unsigned char zustand= 0;
	 switch (zustand)
			{
				case 0:
					if((PIND & 0x04) == 0)
					{
						zustand =1;
						result = 1;
				
					}
					break;
				case 1:
					if((PIND & 0x04) != 0)
					{
						zustand = 2;
						TCCR0B = 0x00;
						TCNT0 = T0VALUE;
						TIMSK0 = 1 << TOIE0;
						TCCR0B = 0x05;
						EntprellZeit = 0;
					}
					break;
				case 2:
					if(EntprellZeit ==1)
					{
						zustand = 0;
					}
					else if((PIND & 0x04) == 0)
					{
						zustand = 1;
					}
					break;
				
			}
			return result;
 }
 ISR(TIMER0_OVF_vect)
 {
	 TCCR0B = 0x00;
	 EntprellZeit = 1;
 }
  ISR(TIMER1_OVF_vect)
 {
	 TCNT1 = TimerInit[TimerIndex];
	 EntprellZeit_B = 1;
 }


// USART
//#include <avr/io.h>
//#define F_CPU 16000000UL
//#include <util/delay.h>
//#define BAUDRATE 9600
//#define BAUD_PRESCALLER (((F_CPU / (BAUDRATE * 16UL))) - 1)
//
//// ????
//void USART_init(void);
//unsigned char USART_receive(void);
//void USART_send( unsigned char data);
//void USART_putstring(char* StringPtr);
//
//int main(void){
    //char String[]="Hello world!";    // ??????????
    //USART_init();    // ???USART
    //while(1){
        //USART_putstring(String);    // ?????
        //_delay_ms(5000);
    //}
//}
//
//void USART_init(void){
    //UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
    //UBRR0L = (uint8_t)(BAUD_PRESCALLER);
    //UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    //UCSR0C = (3<<UCSZ00);
//}
//
//unsigned char USART_receive(void){
    //while(!(UCSR0A & (1<<RXC0)));
    //return UDR0;
//}
//
//void USART_send( unsigned char data){
    //while(!(UCSR0A & (1<<UDRE0)));
    //UDR0 = data;
//}
//
//void USART_putstring(char* StringPtr){
    //while(*StringPtr != 0x00){
        //USART_send(*StringPtr);
    //StringPtr++;}
//}
